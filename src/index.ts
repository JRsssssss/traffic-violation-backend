import express from "express";
import { RegisterRoutes } from "./routes/routes"; // Auto-generated by tsoa
import swaggerUi from "swagger-ui-express";
import fs from "fs";
import cors from "cors";
import dotenv from "dotenv";

// Load environment variables
dotenv.config();

// Set a default JWT secret if not provided in environment
if (!process.env.JWT_SECRET) {
  console.warn(
    "WARNING: JWT_SECRET not set in environment variables. Using default secret for development only."
  );
  process.env.JWT_SECRET = "development-jwt-secret-change-in-production";
} else {
  console.log("JWT_SECRET found in environment variables.");
}

const app = express();
app.use(express.json());
app.use(cors());

const swaggerDocument = JSON.parse(
  fs.readFileSync("./src/swagger.json", "utf8")
);
console.log(swaggerDocument.servers);
// Serve Swagger UI
app.use("/api-docs", swaggerUi.serve, swaggerUi.setup(swaggerDocument));

// Register TSOA Routes
RegisterRoutes(app);

// Error handling middleware for authentication errors
app.use(function errorHandler(
  err: any,
  req: express.Request,
  res: express.Response,
  next: express.NextFunction
): void {
  if (err.status && err.status === 401) {
    res.status(401).json({
      message: "Authentication failed",
      error: err.message || "Unauthorized",
    });
    return;
  }

  if (err.status && err.status === 403) {
    res.status(403).json({
      message: "Authorization failed",
      error: err.message || "Forbidden",
    });
    return;
  }

  console.error("Unhandled error:", err);
  res.status(500).json({
    message: "Internal server error",
    error:
      process.env.NODE_ENV === "production"
        ? "An unexpected error occurred"
        : err.message,
  });
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`ğŸš€ Server running on port ${PORT}`));
